
var express = require('express');
var bodyParser = require('body-parser');

var config = require('./config');
var orch = require('orchestrate');
var db = orch(config.dbkey);
// Depending on the names of the collections within your Orchestrate app,
// you may want a prefix common to all the collections used here.
// For example, if config.prefix is 'myTaskTracker',
// then this server uses collections named 'myTaskTracker-users' and 'myTaskTracker-issues'
var dbPrefix = config.prefix || '';

var app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended : false}));
app.use(express.static(__dirname));

//Optional: automatically log each request when response is sent
var logger = require('morgan');
app.use(logger('dev'));//specifies output format


var database = {
	// these property names determine the db collection names: 
	users:  null, //value is irrevelant since data isn't stored here
	issues: null
};

function getOne(collname) {
	app.get('/'+collname+'/:id', function (req, res) {
		var id = req.params.id;
		console.log('Retrieving model #%s...',id);
		db.get(dbPrefix+collname,id)
		  .then(function(result){
			console.log("Database reply: ", result.body.results);
			res.send(result.body.results.value);
		})
	});
}

function putOne(collname) {
	app.put('/'+collname+'/:id', function (req, res) {
		var id = req.params.id;
		var obj = req.body;
		console.log('Updating model #%s: ',id, obj);
		db.put(dbPrefix+collname, String(id), obj)
		  .then(function(result){
			console.log('Database reply: ',result.path);
			res.send({});
		})
	});
}

function postOne(collname) {
	app.post('/'+collname, function (req, res) {
		var obj = req.body;
		console.log('Storing new model: ',obj);
		db.post(dbPrefix+collname, obj)
		  .then(function(result){
		  	console.log('Database reply: ', result.path);
			// get the unique key generated by orchestrate and return it as a Backbone id:
			res.send({id: result.path.key});
		})
	});
}

function getAll(collname) {
	app.get('/'+collname, function (req, res) {
		console.log('Retrieving all models from collection %s...', collname);
		db.list(dbPrefix+collname)
		  .then(function(result){
				console.log('Database reply: ', result.body.results);
				var vals = result.body.results.map(function(result){
					var val = result.value;
					// ensure that each model has an id by inserting orchestrate key:
					val.id = result.path.key;
					return val;
				})
				console.log('Returning models: ',vals);
				res.send(vals);
			})
		  .fail(function(err){
				console.log(err);
			})
	});
}

function makeRoutes(collname) {
	getOne(collname);
	postOne(collname);
	putOne(collname);
	getAll(collname);
}

Object.keys(database).forEach(makeRoutes);

app.listen(3000);
console.log("Listening on localhost:3000");
